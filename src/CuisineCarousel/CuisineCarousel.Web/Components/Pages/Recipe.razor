@page "/recipe"
@attribute [StreamRendering]
@using CuisineCarousel.Models
@using CuisineCarousel.UseCases
<h3>Recipe</h3>
<MudContainer>
    <MudGrid>
        <MudItem xs="6">
            <MudSelect @bind-Value="originalDishId" Label="Select dish" Placeholder="Pick a classic" AdornmentIcon="@Icons.Material.Filled.Fastfood" AdornmentColor="Color.Primary">
                @foreach (var dish in originalDishes)
                {
                    <MudSelectItem Value="@dish.Id">@dish.Name</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="6">
            <MudSelect @bind-Value="twistId" Label="Select twist" Placeholder="Make it weird" AdornmentIcon="@Icons.Material.Filled.AddTask" AdornmentColor="Color.Primary">
                @foreach (var twist in twists)
                {
                    <MudSelectItem Value="@twist.Id">@twist.Name</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12">
            <MudButton OnClick="() => BuildDish()" Variant="Variant.Filled" Color="Color.Primary" Disabled=@(string.IsNullOrEmpty(originalDishId) || string.IsNullOrEmpty(twistId)) StartIcon="@Icons.Material.Filled.AutoAwesome" EndIcon="@Icons.Material.Filled.AutoAwesome">Build A Dish!</MudButton>
        </MudItem>
    </MudGrid>
</MudContainer>

@if (newRecipe != null)
{
    <MudContainer>
        <MudText Typo="Typo.h4" Class="mt-8">Your new recipe:</MudText>
        <MudText Typo="Typo.h5" Class="mt-8">@newRecipe.Title</MudText>
        <MudText Typo="Typo.body1" Class="mt-8">@newRecipe.Description</MudText>
        <MudText Typo="Typo.body2" Class="mt-8">@newRecipe.Instructions</MudText>
        <MudTextField Label="Instructions" Multiline="true" Rows="4" Variant="Variant.Filled" @bind-Value="updateInstructions"/>
        <MudButton OnClick="() => UpdateDish()" Variant="Variant.Filled" Color="Color.Primary" Disabled=@(string.IsNullOrEmpty(originalDishId) || string.IsNullOrEmpty(twistId)) StartIcon="@Icons.Material.Filled.AutoAwesome" EndIcon="@Icons.Material.Filled.AutoAwesome">Update Dish!</MudButton>
    </MudContainer>
}


@if (updatedRecipe != null)
{
    <MudContainer>
        <MudText Typo="Typo.h4" Class="mt-8">Your updated recipe:</MudText>
        <MudText Typo="Typo.h5" Class="mt-8">@updatedRecipe.Title</MudText>
        <MudText Typo="Typo.body1" Class="mt-8">@updatedRecipe.Description</MudText>
        <MudText Typo="Typo.body2" Class="mt-8">@updatedRecipe.Instructions</MudText>
    </MudContainer>
}

@if (newRecipe != null || updatedRecipe != null)
{
    <MudContainer>
        <MudButton OnClick="() => GenerateImage()" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Brush" EndIcon="@Icons.Material.Filled.Brush">Generate Image!</MudButton>
        <MudImage Src=""></MudImage>
    </MudContainer>
}

@code {

    [Inject] private ICreateRecipeUseCase createRecipeUseCase { get; set; }
    [Inject] private IUpdateRecipeUseCase updateRecipeUseCase { get; set; }
    [Inject] private IOriginalDish OriginalDish { get; set; }
    [Inject] private ITwist TwistService { get; set; }

    private Models.Recipe? newRecipe { get; set; }
    private Models.Recipe? updatedRecipe { get; set; }

    private IEnumerable<OriginalDish> originalDishes { get; set; }
    private IEnumerable<Twist> twists { get; set; }

    private string updateInstructions { get; set; }
    private string originalDishId { get; set; }
    private string twistId { get; set; }

    private async Task BuildDish()
    {
        newRecipe = await createRecipeUseCase.CreateRecipeAsync(originalDishId, twistId);
    }

    private async Task UpdateDish()
    {
        updatedRecipe = await updateRecipeUseCase.UpdateRecipeAsync(newRecipe, updateInstructions);
    }

    private void GenerateImage()
    {
        // generate an image for the new dish
    }

    protected override Task OnInitializedAsync()
    {
        originalDishes = OriginalDish.GetAll();
        twists = TwistService.GetAll();
        return base.OnInitializedAsync();
    }

}
