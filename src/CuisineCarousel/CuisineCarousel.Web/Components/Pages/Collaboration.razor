@page "/collaboration"
@attribute [StreamRendering]
@using CuisineCarousel.Models
@using CuisineCarousel.UseCases

<FadeInAnimation/>

<MudContainer>
    <MudGrid>
        <MudItem xs="6">
            <MudSelect @bind-Value="OriginalDishId" Label="Select dish" Placeholder="Pick a classic" AdornmentIcon="@Icons.Material.Filled.Fastfood" AdornmentColor="Color.Primary">
                @foreach (var dish in OriginalDishes)
                {
                    <MudSelectItem Value="@dish.Id">@dish.Name</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="6">
            <MudSelect @bind-Value="TwistId" Label="Select twist" Placeholder="Make it weird" AdornmentIcon="@Icons.Material.Filled.AddTask" AdornmentColor="Color.Primary">
                @foreach (var twist in Twists)
                {
                    <MudSelectItem Value="@twist.Id">@twist.Name</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        @if (!GeneratingRecipe && !CollaborationSteps.Any())
        {
            <MudItem xs="12">
                <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Row="true">
                    <MudButton OnClick="() => BuildDish()" Variant="Variant.Filled" Color="Color.Primary" Disabled=@(string.IsNullOrEmpty(OriginalDishId) || string.IsNullOrEmpty(TwistId)) StartIcon="@Icons.Material.Filled.AutoAwesome" EndIcon="@Icons.Material.Filled.AutoAwesome">Build A Dish!</MudButton>
                </MudStack>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@if (CollaborationSteps.Any())
{
    @foreach (var step in CollaborationSteps)
    {
        @if (step.Author == "ChatManager")
        {
            continue;
        }

        <StepComponent CollaborationStep="step"/>
    }
}

@if (LatestRecipe != null && !GeneratingRecipe)
{
    <MudContainer Class="mt-4">
        <MudGrid>
            @if(GeneratingImage == false && ImageUri == null)
            {
            <MudItem xs="12">
                <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Row="true">
                    <MudButton OnClick="() => GenerateImage()" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Brush" EndIcon="@Icons.Material.Filled.Brush">Fabricate!</MudButton>
                </MudStack>
            </MudItem>
            }
            @if (ImageUri != null)
            {
            <MudItem xs="12">
                <MudImage Fluid="true" Src="@ImageUri.ToString()"></MudImage>
            </MudItem>
            }
        </MudGrid>
    </MudContainer>
}

@code {

    [Inject] private ICreateCollaborativeRecipeUseCase CreateCollaborativeRecipeUseCase { get; set; } = null!;
    [Inject] private IOriginalDish OriginalDish { get; set; } = null!;
    [Inject] private ITwist TwistService { get; set; } = null!;
    [Inject] private IFabricator Fabricator { get; set; } = null!;

    private Models.Recipe? LatestRecipe { get; set; }

    private List<CollaborationStep> CollaborationSteps { get; set; } = new();

    private IEnumerable<OriginalDish> OriginalDishes { get; set; } = Array.Empty<OriginalDish>();
    private IEnumerable<Twist> Twists { get; set; } = Array.Empty<Twist>();

    private string OriginalDishId { get; set; } = string.Empty;
    private string TwistId { get; set; } = string.Empty;
    private Uri? ImageUri { get; set; }
    private bool GeneratingRecipe { get; set; }
    private bool GeneratingImage { get; set; }

    private async Task BuildDish()
    {
        GeneratingRecipe = true;
        var asyncEnumerable = CreateCollaborativeRecipeUseCase.CreateRecipeAsync(OriginalDishId, TwistId);
        await foreach (var step in asyncEnumerable)
        {
            if (step.Recipe != null)
            {
                LatestRecipe = step.Recipe;
            }

            CollaborationSteps.Add(step);
            StateHasChanged(); // Ensure UI is updated after each step is added
            // Todo: scroll to bottom.
        }

        GeneratingRecipe = false;
    }

    private async Task GenerateImage()
    {
        GeneratingImage = true;
        ImageUri = await this.Fabricator.Fabricate(LatestRecipe!);
        GeneratingImage = false;
    }

    protected override Task OnInitializedAsync()
    {
        OriginalDishes = OriginalDish.GetAll();
        Twists = TwistService.GetAll();
        return base.OnInitializedAsync();
    }

}